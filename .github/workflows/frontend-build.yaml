name: frontend-build

on:
  workflow_dispatch

defaults:
  run:
    shell: bash

env:
  python-version: "3.9"

jobs:
  package:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
            platform-name: windows.x64
            build-cmd: |
              ./frontend/build.sh
              echo $PWD
              ls -al
              ls -al dist/
            output-file-name: ./dist/chessgame.exe             
          - os: macos-10.15
            platform-name: macos.x64
            build-cmd: |
              ./frontend/build.sh
              cd dist/
              echo $PWD
              ls -al
              zip -r9 chessgame chessgame.app/
              ls -al
            output-file-name: ./dist/chessgame.zip
          - os: ubuntu-20.04
            platform-name: linux.x64
            build-cmd: |
              ./frontend/build.sh
              cd dist/
              ls -al
              echo $PWD
            output-file-name: ./dist/chessgame          
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set archive name
        run: |
          ARCHIVE_NAME=chessgame-`git describe --always`-${{ matrix.platform-name }}
          echo "Archive name set to: $ARCHIVE_NAME"
          echo "archive-name=$ARCHIVE_NAME" >> $GITHUB_ENV
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.python-version }}
          cache: 'pip'
      - name: Install APT dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libsdl2-dev libsdl2-image-dev libsdl2-mixer-dev libsdl2-ttf-dev libfreetype6-dev libportmidi-dev libjpeg-dev
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r frontend/requirements.txt
      - name: Run PyInstaller
        env:
          PYTHONOPTIMIZE: 1 # Enable optimizations as if the -O flag is given.
        run: ${{matrix.build-cmd}}
      # This step exists for debugging.  Such as checking if data files were included correctly by PyInstaller.
      - name: List distribution files
        run: |
          ls -al dist
          echo "$PWD"
          
      # Archive the PyInstaller build using the appropriate tool for the platform.
      # - name: Tar files
      #   if: runner.os != 'Windows'
      #   run: |
      #     tar --format=ustar -czvf ${{ env.archive-name }}.tar.gz dist/*/
      # - name: Archive files
      #   if: runner.os == 'Windows'
      #   shell: pwsh
      #   run: |
      #     Compress-Archive dist/*/ ${{ env.archive-name }}.zip
      # Upload archives as artifacts, these can be downloaded from the GitHub actions page.
      - uses: actions/upload-artifact@v2
        with:
          name: ${{env.archive-name}}
          path: ${{matrix.output-file-name}}      
      # # If a tag is pushed then a new archives are uploaded to GitHub Releases automatically.
      # - name: Upload release
      #   if: startsWith(github.ref, 'refs/tags/')
      #   uses: svenstaro/upload-release-action@v2
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: ${{ env.archive-name }}.*
      #     file_glob: true
      #     tag: ${{ github.ref }}
      #     overwrite: true
